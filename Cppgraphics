#include <graphics.h>
#include <iostream>
#include <string>
using namespace std;
class shape
{
public:
    virtual void move(int shapeNo, int direction_1, int direction_2, int xsteps = 0, int ysteps = 0, int length = 0, int breadth = 0) = 0;
    int shapeNo, direction_1, direction_2;
    void getdetail(int shapeNo, int direction_1, int direction_2)
    {
        this->shapeNo = shapeNo;
        this->direction_1 = direction_1;
        this->direction_2 = direction_2;
    }
};

class complexShape : public virtual shape
{
public:
    void draw()
    {
        circle(300, 300, 50);
        rectangle(280, 280, 320, 320);
    }
    void move(int shapeNo, int direction_1, int direction_2, int xsteps = 0, int ysteps = 0, int length = 0, int breadth = 0)
    {
        getdetail(shapeNo, direction_1, direction_2);
        if ((direction_1 == 1) && (direction_2 == 0))
        {
            for (int i = 0; i < xsteps; i++)
            {
                cleardevice();
                circle(300 + i, 300, 50);
                setcolor(GREEN);
                rectangle(280 + i, 280, 320 + i, 320);
                setcolor(CYAN);
                delay(10);
            }
        }

        if ((direction_1 == 0) && (direction_2 == 1))
        {
            for (int i = 0; i < ysteps; i++)
            {
                cleardevice();
                circle(300, 300 - i, 50);
                setcolor(GREEN);
                rectangle(280, 280 - i, 320, 320 - i);
                setcolor(CYAN);
                delay(10);
            }
        }

        if ((direction_1 == -1) && (direction_2 == 0))
        {
            for (int i = 1; i < xsteps; i++)
            {
                cleardevice();
                circle(300 - i, 300, 50);
                setcolor(GREEN);
                rectangle(280 - i, 280, 320 - i, 320);
                setcolor(CYAN);
                delay(10);
            }
        }

        if ((direction_1 == 0) && (direction_2 == -1))
        {
            for (int j = ysteps; j > 0; j--)
            {
                cleardevice();
                circle(300, 300 - j, 50);
                setcolor(GREEN);
                rectangle(280, 280 - j, 320, 320 - j);
                setcolor(CYAN);
                delay(10);
            }
        }
    }
};

class simpleshape : public virtual shape
{
public:
    int xpos, ypos, length, breadth, radius;
    virtual void draw(int shapeNo) = 0;
    void move(int shapeNo, int direction_1, int direction_2, int xsteps = 0, int ysteps = 0, int length = 0, int breadth = 0)
    {
        getdetail(shapeNo, direction_1, direction_2);
        if ((direction_1 == 1) && (direction_2 == 0))
        {
            for (int i = 0; i < xsteps; i++)
            {
                if (shapeNo == 1)
                {
                    cleardevice();
                    rectangle(280 + i, 280, 320 + i, 320);
                    setcolor(CYAN);
                    delay(10);
                }
                if (shapeNo == 2)
                {
                    cleardevice();
                    circle(300 + i, 300, 100);
                    setcolor(CYAN);
                    delay(10);
                }
            }
        }

        if ((direction_1 == 0) && (direction_2 == 1))
        {
            for (int i = 0; i < ysteps; i++)
            {
                if (shapeNo == 2)
                {
                    cleardevice();
                    circle(300, 300 - i, 50);
                    setcolor(GREEN);
                    delay(10);
                }
                if (shapeNo == 1)
                {
                    cleardevice();
                    rectangle(280, 280 - i, 320, 320 - i);
                    setcolor(CYAN);
                    delay(10);
                }
            }
        }

        if ((direction_1 == -1) && (direction_2 == 0))
        {
            for (int i = 1; i < xsteps; i++)
            {
                if (shapeNo == 2)
                {
                    cleardevice();
                    circle(300 - i, 300, 50);
                    setcolor(GREEN);
                    delay(10);
                }
                if (shapeNo == 1)
                {
                    cleardevice();
                    rectangle(280 - i, 280, 320 - i, 320);
                    setcolor(CYAN);
                    delay(10);
                }
            }
        }

        if ((direction_1 == 0) && (direction_2 == -1))
        {
            for (int i = 0; i < ysteps; i++)
            {
                if (shapeNo == 2)
                {
                    cleardevice();
                    circle(300, 300 + i, 50);
                    setcolor(GREEN);
                    delay(10);
                }
                if (shapeNo == 1)
                {
                    cleardevice();
                    rectangle(280, 280 + i, 320, 320 + i);
                    setcolor(CYAN);
                    delay(10);
                }
            }
        }
    }
};

class Box : public simpleshape
{
public:
    int length, breadth;
    void draw(int shapeNo)
    {
        rectangle(280, 280, 320, 320);
        setcolor(BLUE);
        cout << "ENTER COORDINATES TO MOVE SHAPE\n";
        int x, y, stepsL, stepsR;
        cin >> x >> y;
        cout << "ENTER LEFT AND RIGHT STEPS\n";
        cin >> stepsL >> stepsR;
        move(shapeNo, x, y, stepsL, stepsR, length, breadth);
    }
};

class Tent : public simpleshape
{
public:
    void draw(int shapeNo)
    {
        int radius;
        cout << "ENTER CIRCLE RADIUS : " << endl;
        cin >> radius;
        setcolor(GREEN);
        circle(400, 300, radius);
        cout << "ENTER COORDINATES TO MOVE SHAPE\n";
        int x, y, stepsL, stepsR;
        cin >> x >> y;
        cout << "ENTER LEFT AND RIGHT STEPS\n";
        cin >> stepsL >> stepsR;
        move(shapeNo, x, y, stepsL, stepsR);
    }
};
int main()
{
    initwindow(1000, 600);
    int shapeNo = 0;
    do
    {
        cout << "ENTER 1 TO DRAW AND MOVE RECTANGLE" << endl;
        cout << "ENTER 2 TO DRAW AND MOVE CIRCLE" << endl;
        cout << "ENTER 3 TO DRAW AND MOVE A COMPLEX SHAPE" << endl;
        cout << "ENTER 4 TO EXIT" << endl;
        cout << "ENTER YOUR CHOICE : ";
        cin >> shapeNo;
        Box box;
        Tent tent;
        complexShape ComplexShape;
        if (shapeNo == 1)
        {
            box.draw(1);
        }
        else if (shapeNo == 2)
        {
            tent.draw(2);
        }
        else if (shapeNo == 3)
        {
            int x, y, stepsL, stepsR;
            cout << "ENTER MOVEMENT COORDINATES\n";
            cin >> x >> y;
            cout << "ENTER LEFT AND RIGHT STEPS\n";
            cin >> stepsL >> stepsR;

            ComplexShape.move(2, x, y, stepsL, stepsR);
        }
        else
        {
            shapeNo = 0;
            cout << "YOU HAVE EXIT THE PROGRAM!";
        }
    } while (shapeNo != 0);
    return 0;
}
